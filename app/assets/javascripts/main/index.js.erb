var pageLayout
var searchResultsLayout
var datatable, source_table, object_table, runtable, claims_dt, ground_dt;
var runtable_tools
var config_data = {}
var checked_algo = []

$(document).ready(function() {
  setup_layout()
  setup_west_pane()
  setup_datatables()
  setup_start_button()
  setup_pusher()
});

function setup_pusher()
{
  var pusher = new Pusher('<%= Pusher.key %>'); // establishes the connection
  var channel = pusher.subscribe("user_" + current_user_id);
  channel.bind('run_change', function(data) {
    // update corresponding rows in table
    // find run in table (if any) to update it
    var row = runtable.row($("#run-" + data.id).parent().parent())
    if (row.length == 1) {
      row.data(data)
      $(row.node()).effect("highlight")
    }
  });
}

function setup_start_button()
{
  $("#start_button")
  .button()
  .click(function(){
    checked_algo = {}
    var algorithm_id
    $('.algorithm_checkbox').each(function(index, check_box){
      algorithm_id = $(check_box).attr("algorithm_id")
      if($(check_box).is(':checked')){
        checked_algo[algorithm_id] = config_data[algorithm_id]
      }
    });    
     $.ajax({
      type: "POST",
      url : "/runs",
      data: {checked_algo: checked_algo, general_config: config_data["General Parameters"]},
      success: function(){
        runtable.draw()
      }
     });
  });
  disableButton($("#start_button"))
}

function disableButton(button)
{
  button.attr('disabled','disabled').fadeTo("fast", 0.5);
}

function enableButton(button)
{
  button.removeAttr('disabled').fadeTo("fast", 1);
}

function setup_runtable()
{
  var obj = $('#run_table')
  runtable = obj.DataTable({
    dom: 'tiST',
    serverSide : true,
    jQueryUI: true,
    destroy: true,
    ordering: false,
    "scrollY": '300px',
    "ajax": function (data, callback, settings) {
      var url = "/runs";
      $.getJSON(url, data, function(response){
        callback(response)
        $(".action-cancel", obj).unbind().click(function(){
          if(confirm("Are you sure you want to cancel this run?")) {
            console.log("Cancelling...")
            // $.ajax({
            //   url: '/runs/'+$(this).attr("dataset_id"),
            //   type: "DELETE",
            //   success: function(){
            //     runtable.draw();
            //   }
            // });
          }
        });
        $(".action-delete", obj).unbind().click(function(){
          if(confirm("Are you sure you want to delete this run?")) {
            console.log("Deleting...")
            // $.ajax({
            //   url: '/runs/'+$(this).attr("dataset_id"),
            //   type: "DELETE",
            //   success: function(){
            //     runtable.draw();
            //   }
            // });
          }
        });
      });
    },
    'columns': [
      {
        'data': 'created_at',
        'render': function (created_at, type, full, meta){
          return moment(created_at).calendar()
        }
      },
      {'data': 'display'},
      {
        'data': 'status',
        'render': function (status, type, full, meta){
          var class_attrib = ""
          switch(status) {
            case 'scheduled': class_attrib = 'ui-icon ui-icon-clock'; break;
            case 'started': class_attrib = 'spinner'; break;
            case 'finished': class_attrib = 'ui-icon ui-icon-check'; break;
          }
          return '<span class="'+class_attrib+'" title="'+status+'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>'
        }
      },
      {
        'data': 'duration',
        'render': function (duration, type, full, meta){
          switch(full.status){
            case 'scheduled': return ""; break;
            case 'started': return ""; break;
            case 'finished': return moment.duration(duration).humanize(); break;
          }          
        }
      },
      {
        'data': 'id',
        'render': function (id, type, full, meta){
          var actions = ""
          switch(full.status){
            case 'scheduled': actions = ["D"]; break;
            case 'started': actions = ["C"]; break;
            case 'finished': actions = ["D"]; break;
          }
          return $.map(actions, function(action){
            switch(action){
              case 'C':
                return '<span class="action-cancel ui-icon ui-icon-closethick" title="Cancel"></span>'
              case 'D':
                return '<span class="action-delete ui-icon ui-icon-trash" title="Delete"></span>'
            }
          }).join("") +
            '<span id="run-'+id+'"></span>'
        }
      }
    ],
    tableTools: {
      "sRowSelect": "os",
      "fnRowSelected": function ( nodes ) {
        var data = runtable_tools.fnGetSelectedData()
        console.log("Applying results for algorithms", data)
      },
      "fnRowDeselected": function ( nodes ) {
        // clear results from tables
      },
      "fnPreRowSelect": function ( e, nodes ) {
        // console.log(nodes)
        // console.log(e)
        // if ( e.currentTarget.className.indexOf('no_select') != -1 ) {
        //   return false;
        // }
        return true;
      },
      "aButtons": []
    }
  });
  runtable_tools = TableTools.fnGetInstance('run_table');
}

function setup_claims_dataset_table()
{
  claims_dt = setup_dataset_table("claims")
}

function setup_ground_dataset_table()
{
  ground_dt = setup_dataset_table("ground")
}

 function setup_dataset_table(dataset_kind){
   var obj = $('#' + dataset_kind + "_datasets_table")
   var dt = obj.DataTable({
    dom: 'tiS', 
    serverSide : true,
    jQueryUI: true,
    scrollY: '200px',
    destroy: true,
    ordering: false,
    ajax: function (data, callback, settings) {
      var url = "/datasets?kind="+dataset_kind
      $.getJSON(url, data, function(response){
        callback(response)
        $(".trash-icon", obj).click(function(){
          if(confirm("Are you sure you want to delete this dataset?"))
          $.ajax({
            url: '/datasets/'+$(this).attr("dataset_id"),
            type: "DELETE",
            success: function(){
              dt.draw();
              refresh_datatables()
            }
          });
         });
      });
    },
    'columns':[
    {'data': 'id'},
    {'data': 'original_filename'},
    {
      'data': 'created_at',
      'render': function (created_at, type, full, meta){
        return moment(created_at).calendar()
      }      
    },
    {'data': 'row_count'},
    {'data': 'id',
      'render' : function (data,type,full,meta){
        return '<span dataset_id="'+data+'" class="trash-icon ui-icon ui-icon-trash"></span>'
      }
    }
    ]
  });
   return dt;
 }

 function check_algorithm_checkbox()
 {
  var found_check = false
  var algorithm_id

  $(".algorithm_checkbox").each(function(index, check_box){
    algorithm_id = $(check_box).attr("algorithm_id")
      if($(check_box).is(':checked')){        
        found_check= true
        $('input:checked+label').css({'background-color':'green','color':'yellow'})
        $("h3.algorithm_"+algorithm_id).show()
      }
      else{
        $('[type="checkbox"]:not(:checked) + label').css({'background':'none','color':'black'})
        $(".algorithm_"+algorithm_id).hide()
      }
  });

  if (found_check){
    // enable configuration tab
    $('#tabs').tabs("enable",1)

    if($("table#claims_datasets_table tbody tr").length > 0)
      enableButton($("#start_button"))
    else
      disableButton($("#start_button"))
  }
  else{
    $('#tabs').tabs("option", "disabled",[1])
    disableButton($("#start_button"))
  }
 }

function refresh_datatables()
{
  datatable.draw()
  source_table.draw()
  object_table.draw()
}

function setup_datatables() {
  datatable_excess = 100
  var height = searchResultsLayout.state.center.innerHeight - datatable_excess

  source_table = setup_single_datatable("source_id", height)
  object_table = setup_single_datatable("object_key", height)
   
  datatable = $('#datatable').DataTable({
    "serverSide": true,
    "scrollY": height,
    "dom": '<"toolbar"T>tSif',
    "ajax": function (data, callback, settings) {
      var url = "/dataset_rows"
      data.extra_source_id_criteria = source_table.search()
      data.extra_object_key_criteria = object_table.search()
      $.getJSON(url, data, function(response){
        callback(response)
      })
    },
    "columns": [
      {data: 'claim_id'},
      {data: 'object_key'},
      {data: 'property_key'},
      {data: 'property_value'},
      {data: 'source_id'},
      {data: 'timestamp'}
    ],
    "destroy": true,  // destroy first if reinitializing
    "scroller": {
      loadingIndicator: false
    },
    tableTools: {
      "sRowSelect": "os",
      "fnRowSelected": function ( nodes ) {
        var data = datatable.row(nodes[0]).data()
        $("#details").html("You have selected claim with id: " + data.claim_id)
      },
      "fnRowDeselected": function ( nodes ) {
        $("#details").html("")
      },
      "aButtons": []
    }
  });
}

function setup_single_datatable(field_name, height)
{
  var obj = $("#"+field_name+"_datatable")
  var dt = obj.DataTable({
    "serverSide": true,
    "scrollY": height,
    "ajax": function (data, callback, settings) {
      var url = "/dataset_rows"
      data.extra_only = field_name
      if (typeof datatable != 'undefined') datatable.draw()
      $.getJSON(url, data, function(response){
        callback(response)
      })
    },
    dom: 'T<"clear">tSif',
    "language": {
      "info": "_START_-_END_/_TOTAL_",
      "infoFiltered": " (_MAX_ total)",
      "infoEmpty": "0-0/0",
      "search": "",
      "zeroRecords": "No matches"
    },
    "destroy": true,  // destroy first if reinitializing
    "scroller": {
      loadingIndicator: false
    },
    tableTools: {
      "sRowSelect": "none",
     aButtons: []
    }
  });
  $("#"+field_name+"_datatable_filter input").attr("placeholder", "Search")
  return dt;
}

function setup_layout()
{
  pageLayout = $('body').layout({
    applyDefaultStyles: true,
    west__size: "30%",
    west__minSize: "10%",
    west__maxSize: "50%",
    west__onresize: function() {
      datatable.columns.adjust();
      claims_dt.columns.adjust();
      ground_dt.columns.adjust();
      runtable.columns.adjust();
    },
    west__onclose: function() {
      datatable.columns.adjust();
    }
  });
  
  searchResultsLayout = $(".inner").layout({
    applyDefaultStyles: true,
    south__size: "15%",
    south__minSize: "25%",
    south__maxSize: "75%",
    west__size: '15%',
    center__size: '15%',
    east__size: '70%',
    autoResize:       true,  // try to maintain pane-percentages
    closable:       true,
    togglerLength_open:   0, // hide toggler-buttons
    spacing_closed:     0, // hide resizer/slider bar when closed
    autoReopen:       true,  // auto-open panes that were previously auto-closed due to 'no room'
    center__onresize: function() {
      setup_datatables()
    }
  });
}

function setup_west_pane()
{
  $( "#tabs" ).tabs({
    disabled: [1],
    activate: function(event, ui) {
      if (ui.newPanel.attr("id") == "tab-3")
        setup_runtable()
    }
  })
  
  // create algorithm divs
  var container= $("#tab_pane")
  var html = ""
  $.each(algorithms, function(index, algorithm) {
    var params =""
    var order = 0
     config_data[algorithm.name] = []
    $.each(algorithm.params, function(pindex, param){
      if(param.hidden != true){
        params += "<tr><td width='100%'><span class='param-name'>" + param.name
        + "</span><span class='info-icon ui-icon ui-icon-info' title='"
        + param.desc + "'></span> </td><td><input step='"+(param.step||'')+"' dataType= '"+param.dataType+"' class='spinner' min='"
        + param.min+"' max='"+param.max+"' value='"+param.value
        + "' algorithm_id='"+algorithm.name+"' order= '"+order+"' ></input></td></tr>" 
      }
      order ++
      config_data[algorithm.name].push(param.value)
    });
    html += "<h3 class='algorithm_"+algorithm.name+"'>" + algorithm.name + 
    "</h3><div class='algorithm_"+algorithm.name+"'><table cellpadding=0 cellspacing=0 width='100%' border=0 style ='border-collapse:collapse;'>"
      + params + "</table></div>"
  }); 
  container.append(html)

  // create spinners
  
  $(".spinner").spinner({
    step: 0.000001
  })
  .on("spinchange", function(){
    var value = $(this).spinner('value')
    var algo_id = $(this).attr('algorithm_id')
    var order_val = $(this).attr('order')
    config_data[algo_id].splice(order_val,1,value)
  })
  .each(function(){
    var step = $(this).attr('step')
    var dataType = $(this).attr('dataType')

    if (step != '')
    {
      console.log("step defined: ", step, parseFloat(step), $(this).attr("algorithm_id"), $(this).attr('order'))
      $(this).spinner('option', 'numberFormat', 'n')
      $(this).spinner('option', 'step', parseFloat(step))
    }
    else if (dataType == 'double') {
      console.log("default step of 0.1")
      $(this).spinner('option', 'numberFormat', 'n')
      $(this).spinner('option', 'step', 0.1)
    }
    else {
      console.log("integer data type")
      $(this).spinner('option', 'step', 1)
    }
    $(this).spinner('option', 'min', parseFloat($(this).attr("min")));
    $(this).spinner('option', 'max', parseFloat($(this).attr("max")));

  });

  // create Algorithm section in tab-1 under 3rd header
  var container = $("#algo_pane")
  var html =""

  $.each(algorithms, function(index, algorithm){
    if(index!= 0)
    html += "<input type='checkbox' id='algorithm_checkbox_"+algorithm.name+"' algorithm_id='"
  +algorithm.name+
  "' class='algorithm_checkbox color_on_check color_on_uncheck'/><label style='background: none;' class='algorithm_checkbox_label' title='"
  +algorithm.description+"' for='algorithm_checkbox_"+algorithm.name+"'>"+algorithm.name +"</label>"
  });
  container.append(html);

  // create button checkbox
  $(".algorithm_checkbox")
    .button({icons: {primary: 'ui-icon-closethick'}})
    .change(function(){
      $(this).button("option", "icons", {primary: $(this).is(':checked') ? 'ui-icon-check' : 'ui-icon-closethick'})
      check_algorithm_checkbox()
    });
    
  // create the accordion
  $( ".accordion" ).accordion({
    collapsible: true,
    active: 0,
    heightStyle: "content",
  });

  $("#tab-1 .accordion").accordion({
    "activate": function(event, ui) {
      if (ui.newHeader.attr("id") == "upload_claims_header")
        setup_claims_dataset_table()
      else if (ui.newHeader.attr("id") == "upload_ground_header")
        setup_ground_dataset_table()
    }
  })
  setup_claims_dataset_table();

  // file upload
  var jqXHR= null;
  $('.fileupload').fileupload({
    dataType: 'json',
    add: function (e, data) {
      jqXHR = data.submit()
      $(this).parent().next().next().removeAttr('disabled')
    },  
    start: function(){
      // console.log("started upload")
      $(this).parent().next().next().next().find('.progress-bar')
        .css('width','0');
    },
    progressall: function (e, data) {
      // console.log(data)
      var progress = parseInt(data.loaded / data.total * 100, 10);
       $(this).parent().next().next().next().find('.progress-bar')
        .css('width', progress + '%');
    },
    done: function() {
      $(this).parent().next().next().attr('disabled', 'disabled')
      claims_dt.draw()
      ground_dt.draw()
      refresh_datatables();
    },
    fail: function() {
      // console.log("cancelled upload")
      $(this).parent().next().next().attr('disabled', 'disabled')
      $(this).parent().next().next().next().find('.progress-bar')
        .css('width','0');
    }
  });

  $('.cancel').click(function (e) {
    jqXHR.abort();
  });
  
}

