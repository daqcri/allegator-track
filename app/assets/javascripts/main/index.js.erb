var pageLayout
var searchResultsLayout
var datatable, source_table, object_table, runtable, claims_dt, ground_dt;
var runtable_tools
var config_data = {}
var checked_algo = []
var runsets = ["claims", "ground"]

$(document).ready(function() {
  setup_layout()
  setup_west_pane()
  setup_datasets_dialog()
  setup_data_selector()
  setup_datatables()
  setup_start_button()
  setup_runtable()
  setup_pusher()
});

function ground_tab_hidden(){
  var value = $('#ground_datasets_table').dataTable().fnGetData().length
  if (value == 0)
    $('#ground_tab').hide()
  else
    $('#ground_tab').show()
}

function activate_runset_tab(runset_id)
{
  // find corresponding tab
  $.each(runsets, function(id, runset){
    if (id > 1 && runset.id == runset_id) {
      $("#data-selector").tabs("option", "active", id)
      refresh_runset()
      return
    }
  })
}

function add_runset_in_tabs(tabs, runset)
{
  var label = "Runset " + runset.id
  tabs.find( ".ui-tabs-nav" )
    .append("<li> <a href='#tab-common'>"+label+"</a><span id='"+runset.id+"' class='ui-icon ui-icon-close' role='presentation'></span> </li>");
  runsets.push(runset)
}

function add_runset(runset)
{
  var tabs = $("#data-selector").tabs()
  add_runset_in_tabs(tabs, runset)
  tabs.tabs( "refresh" );
}

function refresh_runset()
{
  destroy_datatables()
  setup_datatables()
  refresh_charts()
  console.log('refresh_runset called')
}

function setup_data_selector()
{
  // initialize tabs
  var tabs = $("#data-selector").tabs({
    activate: function(event, ui) {
      var active = tabs.tabs( "option", "active" )
     
      if(active > 1){
        $('#show_input').hide()
        $('#tab-common').show()
      }
      else{
        
        $('#tab-common').hide()
        $('#show_input').show()
      }

      // TODO: show runset info
      refresh_runset()
    }
  })

  // export links
  $(".export-command").click(function(){
    var data_selector = $("#data-selector").tabs("option", "active")
    var runset = runsets[data_selector]
    var what = $(this).attr("value")
    var checkbox = what == 'source_id' ? $("#source_id_normalize") : $("#claims_normalize");
    var normalized = checkbox.find("input").is(":checked") ? "1" : ""
    window.location = '/runsets/'+runset.id+'/results?export=1&extra_only='+what+'&extra_normalized='+normalized
  })

  // append tab for each runset
  $.getJSON('/runsets', function(runsets){
    $.each(runsets, function(id, runset){
      add_runset_in_tabs(tabs, runset)
    })
    tabs.tabs( "refresh" );
    $('#tab-common').hide()
    $('#show_input').show()
  })
  
  // close icon remove runset from server
  tabs.delegate( "span.ui-icon-close", "click", function() {
    if (confirm("Are you sure you want to permanently delete this runset?")){
      var span_id = $(this).attr("id")
       var span_rm = this
       delete_runset(span_rm, span_id)
    }
  });
}

function delete_runset(span_rm,span_id){
  $.ajax({
    url: '/runsets/'+ span_id,
    type: "DELETE",
    success: function(){
      // delete item from array
      runsets = $.grep(runsets,function(value, i){
        if(i<=1)
          return value
        else if(i>1)
          return value.id != span_id
      })
      runtable.draw()
      var panelId = $( span_rm).closest( "li" ).remove()
      $( "#" + panelId ).remove()
      $('#data_selector').tabs( "refresh" )
    }
  });
  var tabs = $("#data-selector").tabs()
  tabs.tabs({active:0}) 
}

function setup_pusher()
{
  var pusher = new Pusher('<%= Pusher.key %>'); // establishes the connection
  var channel = pusher.subscribe("user_" + current_user_id);
  channel.bind('run_change', function(run) {
    console.log("received push", run)
     var runset = $.grep(runsets,function(runset, i){
      return runset.id == run.runset_id
     })[0]
     var found_run = $.grep(runset.runs, function(run_value,j){
      return run_value.id == run.id
     })[0]
     found_run.status = run.status
     activate_runset_tab(runset.id)

    // update corresponding rows in table
    // find run in table (if any) to update it
    var row = runtable.row($("#run-" + run.id).parent().parent())
    if (row.length == 1) {
      row.data(run)
      $(row.node()).effect("highlight")
    }
  });
}

function setup_start_button()
{
  $("#start_button")
  .button()
  .click(function(){
    checked_algo = {}
    var algorithm_id
    $('.algorithm_checkbox').each(function(index, check_box){
      algorithm_id = $(check_box).attr("algorithm_id")
      if($(check_box).is(':checked')){
        checked_algo[algorithm_id] = config_data[algorithm_id]
      }
    });    
     $.ajax({
      type: "POST",
      url : "/runsets",
      data: {checked_algo: checked_algo, general_config: config_data["General Parameters"]},
      success: function(runset){
        runtable.draw()
        add_runset(runset)
        activate_runset_tab(runset.id)
      }
     });
  });
}

function setup_runtable()
{
  var runtable_excess = 47
  var height = searchResultsLayout.state.south.innerHeight - runtable_excess
  console.log(height)
  var obj = $('#run_table')
  runtable = obj.DataTable({
    dom: 'tJST',
    serverSide : true,
    jQueryUI: true,
    destroy: true,
    ordering: false,
    deferRender:true,
    "scrollY": height,
    "scrollX": true,  // so that table header scrolls with content
    "ajax": function (data, callback, settings) {
      var url = "/runs";
      $.getJSON(url, data, function(response){
        callback(response)
        $(".action-cancel", obj).unbind().click(function(event){
          event.stopPropagation(); // stop the click from propagating to the tr to select/deselcet
          // if(confirm("Sorry, not implemented yet, just keep calm and stay tuned!")) {
          if(alert("Sorry, not implemented yet, just keep calm and stay tuned!")) {
            console.log("Cancelling...")
            // $.ajax({
            //   url: '/runs/'+$(this).attr("dataset_id"),
            //   type: "DELETE",
            //   success: function(){
            //     runtable.draw();
            //   }
            // });
          }
        });
        $(".action-delete", obj).unbind().click(function(event){
          event.stopPropagation(); // stop the click from propagating to the tr to select/deselcet
          if(confirm("Are you sure you want to delete this run?")) {
            var run_id = $(this).attr("run_id")
            $.ajax({
              url: '/runs/'+ run_id,
              type: "DELETE",
              success: function(){
                runtable.draw();
                $.each(runsets, function(i, runset){
                  if(i>1){
                    runset.runs = $.grep(runset.runs, function(run, index){
                      return run.id != run_id
                    })
                  }
                })
                runsets = $.grep(runsets,function(value, i){
                  if(i>1 && value.runs == 0){
                    delete_runset('span#'+value.id, value.id)
                    return
                  }
                  else
                    return value
                })
                destroy_datatables()
                setup_datatables()
              }
            });
          }
        });
      });
    },
    'columns': [
      {
        'data': 'runset_id'
      },
      {
        'data': 'created_at',
        'render': function (created_at, type, full, meta){
          return moment(created_at).calendar()
        }
      },
      {'data': 'display'},
      {
        'data': 'status',
        'render': function (status, type, full, meta){
          var class_attrib = ""
          switch(status) {
            case 'scheduled': class_attrib = 'ui-icon ui-icon-clock'; break;
            case 'started': class_attrib = 'spinner'; break;
            case 'finished': return moment("00:00:00", "HH:mm:ss").add(moment.duration(full.duration)).format("HH:mm:ss.SSS")
          }
          return '<span class="'+class_attrib+'" title="'+status+'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>'
        }
      },
      {
        'data': 'id',
        'render': function (id, type, full, meta){
          var actions = ""
          switch(full.status){
            case 'scheduled': actions = ["D"]; break;
            case 'started': actions = ["C"]; break;
            case 'finished': actions = ["D"]; break;
          }
          return $.map(actions, function(action){
            switch(action){
              case 'C':
                return '<span run_id="'+id+'" class="action-cancel ui-icon ui-icon-closethick" title="Cancel"></span>'
              case 'D':
                return '<span run_id="'+id+'" class="action-delete ui-icon ui-icon-trash" title="Delete"></span>'
            }
          }).join("") +
            '<span id="run-'+id+'"></span>'
        }
      }
    ],
    tableTools: {
      "sRowSelect": "single",  // "os" doesn't allow fnPreRowSelect to work!
      "fnRowSelected": function ( nodes ) {
        var run = runtable.row(nodes[0]).data()
        console.log("selected run", run)
        activate_runset_tab(run.runset_id)
      },
      // "fnPreRowSelect": function ( ev, nodes ) {
      //   console.log("in preselect", ev, nodes)
      //   var status = runtable.row(nodes[0]).data().status;
      //   return status == "finished";
      // },
      "aButtons": []
    }
  });
  runtable_tools = TableTools.fnGetInstance('run_table');
}

function setup_claims_dataset_table()
{
  claims_dt = setup_dataset_table("claims")
}

function setup_ground_dataset_table()
{
  ground_dt = setup_dataset_table("ground")
}

 function setup_dataset_table(dataset_kind){
  var obj = $('#' + dataset_kind + "_datasets_table")
  var dt = obj.DataTable({
    dom: 'JtS', 
    serverSide : true,
    jQueryUI: true,
    scrollY: '200px',
    scrollX: true,  // so that table header scrolls with content
    destroy: true,
    ordering: false,
    ajax: function (data, callback, settings) {
      var url = "/datasets?kind="+dataset_kind
      $.getJSON(url, data, function(response){
        callback(response)
        ground_tab_hidden()
        $(".trash-icon", obj).click(function(){
          if(confirm("Are you sure you want to delete this dataset?"))
          $.ajax({
            url: '/datasets/'+$(this).attr("dataset_id"),
            type: "DELETE",
            success: function(){
              dt.draw()
              refresh_datatables()              
            }
          });
         });
      });
    },
    'columns':[
     {'data': 'original_filename'},
      {
        'data': 'created_at',
        'render': function (created_at, type, full, meta){
          return moment(created_at).calendar()
        }      
      },
      {'data': 'row_count'},
      {'data': 'id',
        'render' : function (data,type,full,meta){
          return '<span dataset_id="'+data+'" class="trash-icon ui-icon ui-icon-trash"></span>'
        }
      }
    ]
  });

   return dt;
 }

 function check_algorithm_checkbox()
 {
  var found_check = false
  var algorithm_id

  $(".algorithm_checkbox").each(function(index, check_box){
    algorithm_id = $(check_box).attr("algorithm_id")
      if($(check_box).is(':checked')){        
        found_check= true
        $('input:checked+label').css({'background-color':'green','color':'yellow'})
        $("h3.algorithm_"+algorithm_id).show()
      }
      else{
        $('[type="checkbox"]:not(:checked) + label').css({'background':'none','color':'black'})
        $(".algorithm_"+algorithm_id).hide()
      }
  });

  if (found_check){
    // enable configuration tab
    $('#tabs').tabs("enable",1)
  }
  else{
    $('#tabs').tabs("option", "disabled",[1])

  }
 }

function refresh_datatables()
{
  datatable.draw()
  source_table.draw()
  object_table.draw()
}

function destroy_datatables()
{
  source_table.destroy();
  object_table.destroy();
  datatable.destroy();
}

function setup_datatables() {
  var datatable_excess = 135
  var height = searchResultsLayout.state.center.innerHeight - datatable_excess

  var data_selector = $("#data-selector").tabs("option", "active")

  var showing_inputs = data_selector <= 1
  var hidden_column = []
  var runset = runsets[data_selector]
  var has_normailze_checkbox = false;
  var checkbox = $("#claims_normalize");

  source_table = setup_single_datatable("source_id", "source_id", showing_inputs, runset, height,
    typeof source_table != 'undefined' ? source_table.search() : '', function(){
      object_table.draw()
      datatable.draw()
    })
  object_table = setup_single_datatable("object_key", "object_id", true, runset == 'ground' ? runset : runsets[0], height,
    typeof object_table != 'undefined' ? object_table.search() : '', function(){
      source_table.draw()
      datatable.draw()
    })

  var filter = typeof datatable != 'undefined' ? datatable.search() : ''

  var obj = $('#datatable')
  obj.removeData("last_filter")
  obj.empty().append($("<thead><tr></tr></thead>"))
  var thead = $("thead tr", obj)
  var cols = []
  var basic_fields = {
    claim_id: "claim_id",
    object_key: "object_id",
    property_key: "property_id",
    property_value: "property_value",
    source_id: "source_id",
    timestamp: "timestamp"
  }
  // change basic_fields_length if basic_fields changes
  var basic_fields_length = 6; 

  $.each(basic_fields, function(field_name, field_display){
    thead.append("<th>"+field_display+"</th>")
    cols.push({data: field_name})
  })

  var finished_runs
  if (!showing_inputs) {
    finished_runs = append_runs_to_table(runset, thead, cols)
    has_normailze_checkbox = !showing_inputs && finished_runs.length > 0;
  }

  datatable = obj.DataTable({
    "serverSide": true,
    "deferLoading": 0,  // don't load first page automatically because main datatable is not ready yet
    "scrollY": has_normailze_checkbox ? height - 50 : height,
    "scrollX": true,  // so that table header scrolls with content
    jQueryUI: true,
    "bStateSave": true,
    "dom": 'C<"toolbar"T>JtSif',
    "colVis": {
      "exclude": []
    },

    "ajax": function (data, callback, settings) {
      var url
      if (showing_inputs) {
        url = "/dataset_rows"
        data.extra_kind = runset
      }
      else {
        url = "/runsets/" + runset.id + "/results"
      }
      data.extra_source_id_criteria = source_table.search()
      data.extra_object_key_criteria = object_table.search()
      if (has_normailze_checkbox && checkbox.find("input").is(":checked"))
        data.extra_normalized = 1
      $.getJSON(url, data, function(response){
        callback(response)
      })
      // manually handle search filter change to update other tables
      if (obj.data("last_filter") != datatable.search()) {
        obj.data("last_filter", datatable.search())
        source_table.draw();
        object_table.draw();
      }
    },
    "columns": cols,
    "rowCallback": function( row, data ) {
      // Color the confidences green/red
      if (!showing_inputs) {
        $.each(finished_runs, function(id, run){
          var bool = data["r"+run.id+"_bool"]
          var td = $("td:eq("+(basic_fields_length+id)+")", row)
          td.addClass("claim_is_"+bool)
        })
      }
    },
    "destroy": true,  // destroy first if reinitializing
    "scroller": {
      loadingIndicator: false
    },
    tableTools: {
      "sRowSelect": "os",
      "fnRowSelected": function ( nodes ) {
        var data = datatable.row(nodes[0]).data()
        //$("#details").html("You have selected claim with id: " + data.claim_id)
      },
      "fnRowDeselected": function ( nodes ) {
        //$("#details").html("")
      },
      "aButtons": []
    }
  });
  $.each($("#datatable").dataTable().fnSettings().aoColumns, function(c){
    if($("#datatable").dataTable().fnSettings().aoColumns[c].bVisible == false){
      hidden_column = hidden_column.concat($("#datatable").dataTable().fnSettings().aoColumns[c].idx)
    }
  })
  console.log(hidden_column)

  $("#datatable_filter input").val(filter)

  if (filter) datatable.search(filter).draw()

  toggle_normalize_checkbox(checkbox, has_normailze_checkbox, datatable)

  source_table.draw()
  object_table.draw()
  
}

function setup_single_datatable(field_name, field_display, showing_inputs, runset, height, filter, search_callback)
{
  console.log("in setup_single_datatable", field_name)
  var obj = $("#"+field_name+"_datatable")
  obj.removeData("last_filter")

  obj.empty().append($("<thead><tr></tr></thead>"))
  var thead = $("thead tr", obj)
  thead.append("<th>"+field_display+"</th>")
  var cols = [{data: field_name}]

  var has_normailze_checkbox = false;
  var checkbox = $("#"+field_name+"_normalize");

  if (!showing_inputs) {
    var finished_runs = append_runs_to_table(runset, thead, cols)
    has_normailze_checkbox = !showing_inputs && finished_runs.length > 0;
  }

  var dt = obj.DataTable({
    "serverSide": true,
    "deferLoading": 0,  // don't load first page automatically because main datatable is not ready yet
    "scrollY": has_normailze_checkbox ? height - 30 : height,
    jQueryUI: true,
    "ajax": function (data, callback, settings) {
      var url
      if (showing_inputs) {
        url = "/dataset_rows"
        data.extra_kind = runset
      }
      else {
        url = "/runsets/" + runset.id + "/results"
      }
      data.extra_only = field_name
      data.extra_source_id_criteria = source_table.search()
      data.extra_object_key_criteria = object_table.search()
      data.extra_criteria = datatable.search()
      if (has_normailze_checkbox && checkbox.find("input").is(":checked"))
        data.extra_normalized = 1
      if (typeof datatable != 'undefined') datatable.draw()
      $.getJSON(url, data, function(response){
        callback(response)
      })
    // manually handle search filter change to update other tables
      if (obj.data("last_filter") != dt.search()) {
        obj.data("last_filter", dt.search())
        search_callback()
      }

    },
    "columns": cols,
    dom: 'T<"clear">JtSif',
    "language": {
      "info": "_START_-_END_/_TOTAL_",
      "infoFiltered": " (_MAX_ total)",
      "infoEmpty": "0-0/0",
      "search": "",
      "zeroRecords": "No matches"
    },
    "destroy": true,  // destroy first if reinitializing
    "scroller": {
      loadingIndicator: false
    },
    tableTools: {
      "sRowSelect": "none",
     aButtons: []
    }
  });
  $("#"+field_name+"_datatable_filter input")
      .attr("placeholder", "Search")
      .val(filter)

  if (filter) dt.search(filter)

  toggle_normalize_checkbox(checkbox, has_normailze_checkbox, dt)

  return dt;
}  

function toggle_normalize_checkbox(checkbox, visible, datatable)
{
  if (visible) {
    // append checkbox
    checkbox
      .show()
      .unbind()
      .find("input")
      .change(function(){
        datatable.draw()
      })
  }
  else
    checkbox.hide()
}

function append_runs_to_table(runset, thead, cols)
{
  var finished_runs = $.grep(runset.runs, function(run){return run.status == 'finished'})
  $.each(finished_runs, function(i, run){
    thead.append("<th>["+run.id + "] " + run.algorithm+"</th>")
    cols.push({data: 'r'+run.id})
  })
  return finished_runs
}

function setup_layout()
{
  
  var page_west = '30%'
  var inner_west = '15%'
  var inner_center = '15%'
  var inner_east =  '70%'
  var inner_south = '15%'
  $('#ground_tab').hide()

  pageLayout = $('body').layout($.extend({
    applyDefaultStyles: true,
    west__size: page_west,
    west__minSize: "10%",
    west__maxSize: "50%",
    autoResize:       true, 
    animatePaneSizing: true,
    west__onresize: function() {
      datatable.columns.adjust();
      claims_dt.columns.adjust();
      ground_dt.columns.adjust();
      runtable.columns.adjust();
    },
    west__onclose: function() {
      datatable.columns.adjust();
      runtable.columns.adjust();
      claims_dt.columns.adjust();
      ground_dt.columns.adjust();
    },
  },layoutState.load('pageLayout')));

  inner_height()
  $('.ui-layout-center').css('padding', '0px')
  $(window).resize(function(){
    inner_height()
  })

  searchResultsLayout = $(".inner").layout($.extend({
    applyDefaultStyles: true,
    south__size: inner_south,
    south__minSize: "25%",
    south__maxSize: "75%",
    west__size: inner_west,
    center__size: inner_center,
    east__size: inner_east,
    autoResize:       true,  // try to maintain pane-percentages
    closable:       true,
    togglerLength_open:   0, // hide toggler-buttons
    spacing_closed:     0, // hide resizer/slider bar when closed
    autoReopen:       true,  // auto-open panes that were previously auto-closed due to 'no room'
    center__onresize: function() {
      setup_runtable()
      setup_datatables()
      setup_claims_dataset_table()
      setup_ground_dataset_table()
    }
  },layoutState.load('searchResultsLayout')));

  $(window).unload(function(){ layoutState.save('pageLayout')})
  $(window).unload(function(){ layoutState.save('searchResultsLayout') })

  

  $('#Logo').click(function(){
    pageLayout.sizePane('west', page_west)
    searchResultsLayout.sizePane('east', inner_east)
    searchResultsLayout.sizePane('west', inner_west)
    searchResultsLayout.sizePane('south', inner_south)   
    
  })
}

function setup_west_pane()
{

  $( "#tabs" ).tabs({
    disabled: [1],
    activate: function(event, ui) {
      var active = $('#tabs').tabs( "option", "active" )
      // change layout for visualize tab
      if(active == 2)
        pageLayout.sizePane('west','50%')
      else{
        pageLayout.sizePane('west','30%')
        searchResultsLayout.sizePane('center', '15%')
      }
      if (ui.newPanel.attr("id") == 'tab-3') {
        refresh_charts()
      }       
     }
  })
  
  // create algorithm divs
  var container= $("#tab_pane")
  var html = ""
  $.each(algorithms, function(index, algorithm) {
    var params =""
    var order = 0
     config_data[algorithm.name] = []
    $.each(algorithm.params, function(pindex, param){
      if(param.hidden != true){
        params += "<tr><td width='100%'><span class='param-name'>" + param.name
        + "</span><span class='info-icon ui-icon ui-icon-info' title='"
        + param.desc + "'></span> </td><td><input step='"+(param.step||'')+"' dataType= '"+param.dataType+"' class='spinner' min='"
        + param.min+"' max='"+param.max+"' value='"+param.value
        + "' algorithm_id='"+algorithm.name+"' order= '"+order+"' ></input></td></tr>" 
      }
      order ++
      config_data[algorithm.name].push(param.value)
    });
    html += "<h3 class='algorithm_"+algorithm.name+"'>" + algorithm.name + 
    "</h3><div class='algorithm_"+algorithm.name+"'><table cellpadding=0 cellspacing=0 width='100%' border=0 style ='border-collapse:collapse;'>"
      + params + "</table></div>"
  }); 
  container.append(html)

  // create spinners
  
  $(".spinner").spinner({
    step: 0.000001
  })
  .on("spinchange", function(){
    var value = $(this).spinner('value')
    var algo_id = $(this).attr('algorithm_id')
    var order_val = $(this).attr('order')
    config_data[algo_id].splice(order_val,1,value)
  })
  .each(function(){
    var step = $(this).attr('step')
    var dataType = $(this).attr('dataType')

    if (step != '')
    {
      //console.log("step defined: ", step, parseFloat(step), $(this).attr("algorithm_id"), $(this).attr('order'))
      $(this).spinner('option', 'numberFormat', 'n')
      $(this).spinner('option', 'step', parseFloat(step))
    }
    else if (dataType == 'double') {
     // console.log("default step of 0.1")
      $(this).spinner('option', 'numberFormat', 'n')
      $(this).spinner('option', 'step', 0.1)
    }
    else {
     // console.log("integer data type")
      $(this).spinner('option', 'step', 1)
    }
    $(this).spinner('option', 'min', parseFloat($(this).attr("min")));
    $(this).spinner('option', 'max', parseFloat($(this).attr("max")));

  });

  // create Algorithm section in tab-1 under 3rd header
  var container = $("#algo_pane")
  var html =""

  $.each(algorithms, function(index, algorithm){
    if(index!= 0)
    html += "<input type='checkbox' id='algorithm_checkbox_"+algorithm.name+"' algorithm_id='"
  +algorithm.name+
  "' class='algorithm_checkbox color_on_check color_on_uncheck'/><label style='background: none;' class='algorithm_checkbox_label' title='"
  +algorithm.description+"' for='algorithm_checkbox_"+algorithm.name+"'>"+algorithm.name +"</label>"
  });
  container.append(html);

  // create button checkbox
  $(".algorithm_checkbox")
    .button({icons: {primary: 'ui-icon-closethick'}})
    .change(function(){
      $(this).button("option", "icons", {primary: $(this).is(':checked') ? 'ui-icon-check' : 'ui-icon-closethick'})
      check_algorithm_checkbox()
    });
    
  // create the accordion
  $( ".accordion" ).accordion({
    collapsible: true,
    active: 0,
    heightStyle: "content",
  });

  $("#tab-1 .accordion").accordion({
    "activate": function(event, ui) {
      if (ui.newHeader.attr("id") == "upload_claims_header")
        setup_claims_dataset_table()
      else if (ui.newHeader.attr("id") == "upload_ground_header"){
        setup_ground_dataset_table()
      }
    }
  })
  setup_claims_dataset_table();

  // file upload
  var jqXHR= null;
  $('.fileupload').fileupload({
    dataType: 'json',
    add: function (e, data) {
      jqXHR = data.submit()
      $(this).parent().next().next().removeAttr('disabled')
    },  
    start: function(){
      // console.log("started upload")
      $(this).parent().next().next().next().find('.progress-bar')
        .css('width','0');
    },
    progressall: function (e, data) {
      // console.log(data)
      var progress = parseInt(data.loaded / data.total * 100, 10);
       $(this).parent().next().next().next().find('.progress-bar')
        .css('width', progress + '%');
    },
    done: function() {
      $(this).parent().next().next().attr('disabled', 'disabled')
      claims_dt.draw()
      ground_dt.draw()
      refresh_datatables();
    },
    fail: function() {
      // console.log("cancelled upload")
      $(this).parent().next().next().attr('disabled', 'disabled')
      $(this).parent().next().next().next().find('.progress-bar')
        .css('width','0');
    }
  });

  $('.cancel').click(function (e) {
    jqXHR.abort();
  });
}

function refresh_charts()
{
  // list runs of current runset in runs_selector
  var data_selector = $("#data-selector").tabs("option", "active")
  var showing_inputs = data_selector <= 1
  var runset = runsets[data_selector]
  var select = $("#runs_selector")
  var options

  if (showing_inputs) {
    options = ["<option value='-1'>Select a runset from the right to show its runs</option>"]
  }
  else {
    options = ["<option value='-1'>Select a run</option>"]
      .concat($.map(runset.runs, function(run){
      return "<option value='"+run.id+"'>"+run.display+"</option>"
    }))
  }

  select.html(options.join("\n"))
    .change(function(){
      var run_id = $(this).val()
      if (run_id != "-1") {
        $.getJSON("/runs/"+run_id+"/visualize", function(response){
          $('#chart').empty()
          createChart(response, "#chart")
        })
      }
    })
}

function setup_datasets_dialog(dataset_icon_selector){
  var dialog_div = $("#datasets_dialog")
  var datasets = ["Books", "Flights", "Population", "Weather"]

  var html = "<ol>"
  $.each(datasets, function(id, dataset){
    html += "<li><a href='http://allegatortrack.s3-website-us-east-1.amazonaws.com/datasets/"
      +dataset+".zip'>"+dataset+"</a></li>"
  })

  html += "</ol>"

  dialog_div.empty().append(html).dialog({
    autoOpen: false,
    modal: true
  });

  $(".download-datasets").click(function(){
    dialog_div.dialog('open')
  });
}

function inner_height(){
  $('.inner').css('height', $(window).height() - $('#data-selector').height())
}
