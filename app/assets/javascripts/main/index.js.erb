var pageLayout
var datatable, source_table, runtable, claims_dt, ground_dt;
var runtable_tools
var config_data = {}
var runsets = [{id: 0, runs: []}] // placeholder for input tab
var s3_direct_post = {}
var datatable_columns_visibility = {}
var datatable_columns = []
var selected_claim_datasets = new HashWithLength()
var selected_ground_datasets = new HashWithLength()
var source_view, normalized_view, detail_view

$(document).ready(function() {
  setup_layout()
  setup_west_pane()
  setup_datasets_dialog()
  setup_data_selector()
  setup_start_button()
  setup_allegationtable()
  setup_pusher()
  toggle_start_button()
});

function set_table_title()
{
  var data_selector = $("#data-selector").tabs("option", "active")
  var runset = runsets[data_selector]
  var text = ""
  var len = selected_claim_datasets.length + selected_ground_datasets.length

  if (data_selector == 0) {
    // input
    if (len == 0)
      text = "No datasets selected"
    else
      text = "Unique " + (source_view ? "sources" : "rows") + " for " + len + " dataset(s)"
  }
  else {
    // runsets
    text = (source_view ? "Source trustworthiness" : "Claim confidence")
      + " results for " + runset.claim_datasets.length + " dataset(s)"
    if (runset.ground_datasets.length > 0)
      text += " and " + runset.ground_datasets.length + " ground truth dataset(s)"
  }

  $(".tabletitle").text(text)
}

function toggle_start_button()
{
  // enable only if at least 1 claim dataset selected and 1 non-combiner algorithm selected
  var checked_algos = $(".algorithm_checkbox:checked")

  var enable = true
  var messages = []
  if (checked_algos.length == 0) {
    enable = false
    messages.push("You should select at least 1 algorithm. ")
  }
  else
    messages.push("<strong>" + checked_algos.length + " algorithm(s)</strong> selected. ")

  if (selected_claim_datasets.length == 0) {
    enable = false
    messages.push("You should select at least 1 claims dataset. ")
  }
  else
    messages.push("<strong>" + selected_claim_datasets.length + " claim dataset(s)</strong> selected. ")

  messages.push("<strong>" + selected_ground_datasets.length + " ground truth dataset(s)</strong> selected. ")

  if (checked_algos.length > 1 && selected_ground_datasets.length > 0)
    $(".combiner").removeClass("combiner_off")
  else
    $(".combiner").addClass("combiner_off")

  $("#start_button").button(enable ? "enable" : "disable")

  // refresh new runset summary
  $("#start_summary").html(
    $.map(messages, function(msg){return "<div>"+msg+"</div>"})
  )
}

function activate_runset_tab(runset_id)
{
  // find corresponding tab
  $.each(runsets, function(id, runset){
    if (runset.id == runset_id) {
      $("#data-selector").tabs("option", "active", id)
      refresh_runset()
      return
    }
  })
}

function add_runset_in_tabs(tabs, runset)
{
  var label = "Results " + runset.id
  tabs.find( ".ui-tabs-nav" )
    .append("<li> <a href='#tab-common'>"+label+"</a><span runset_id='"+runset.id+"' class='ui-icon ui-icon-close' role='presentation'></span> </li>");
  runsets.push(runset)
}

function add_runset(runset)
{
  var tabs = $("#data-selector").tabs()
  add_runset_in_tabs(tabs, runset)
  tabs.tabs( "refresh" );
}

function refresh_runset()
{
  destroy_datatables()
  setup_datatables()
  // console.log('refresh_runset called')
}

function setup_data_selector()
{
  // initialize tabs
  var tabs = $("#data-selector").tabs({
    heightStyle: 'auto',  // set content div height to tallest div
    activate: function(event, ui) {
      var active = tabs.tabs( "option", "active" )
      if (runsets[active].id > 0) {
        // runsets
        $("#source_view").parent().prependTo($('#tab-common')).show()
        $('#show_input').hide()
        $('#tab-common').show()
      }
      else {
        // input
        $("#source_view").parent().prependTo($('#show_input')).show()
        $('#tab-common').hide()
        $('#show_input').show()
      }

      // TODO: show runset info
      refresh_runset()
    }
  })

  // detailed view
  $("#detail_view")
    .button({icons: {primary: 'ui-icon-radio-off'}})
    .change(function(){
      destroy_datatables()
      var check_box = $(this)
      if (check_box.is(':checked')) {
        check_box.button("option", "icons", {primary: 'ui-icon-check'})
        check_box.next().addClass("vivid_checkbox_label")
        detail_view = true
      }
      else {
        check_box.button("option", "icons", {primary: 'ui-icon-radio-off'})
        check_box.next().removeClass("vivid_checkbox_label")
        detail_view = false
      }
      setup_datatables()
    })
    .change()

  // source view
  $("#source_view")
    .button({icons: {primary: 'ui-icon-radio-off'}})
    .change(function(){
      destroy_datatables()
      var check_box = $(this)
      if (check_box.is(':checked')) {
        check_box.button("option", "icons", {primary: 'ui-icon-check'})
        check_box.next().addClass("vivid_checkbox_label")
        $("#datatable").parent().hide()
        $("#source_id_datatable").parent().show()
        $("#detail_view").button("disable")
        source_view = true
      }
      else {
        check_box.button("option", "icons", {primary: 'ui-icon-radio-off'})
        check_box.next().removeClass("vivid_checkbox_label")
        $("#source_id_datatable").parent().hide()
        $("#datatable").parent().show()
        $("#detail_view").button("enable")
        source_view = false
      }
      setup_datatables()
    })
    .change()

  // normalized view
  $("#normalized_view")
    .button({icons: {primary: 'ui-icon-radio-off'}})
    .change(function(){
      var check_box = $(this)
      if (check_box.is(':checked')) {
        check_box.button("option", "icons", {primary: 'ui-icon-check'})
        check_box.next().addClass("vivid_checkbox_label")
        normalized_view = true
      }
      else {
        check_box.button("option", "icons", {primary: 'ui-icon-radio-off'})
        check_box.next().removeClass("vivid_checkbox_label")
        normalized_view = false
      }
      if (source_view)
        source_table.draw()
      else
        datatable.draw()
    })
    .change()

  // export links
  $("#export-command")
    .button()
    .click(function(){
      var data_selector = $("#data-selector").tabs("option", "active")
      var runset = runsets[data_selector]
      var what = source_view ? "source_id" : ""
      var normalized = normalized_view ? "1" : ""
      window.location = '/runsets/'+runset.id+'/results.csv?extra_only='+what+'&extra_normalized='+normalized
    })

  // visualize runs
  $("#visualize-command")
    .button({
      icons: {secondary: "ui-icon-triangle-1-s"}
    })
    .click(function(){
      var data_selector = $("#data-selector").tabs("option", "active")
      var runset = runsets[data_selector]
      // construct menu items
      var items = []
      $.each(runset.runs, function(id, run){
        if (!run["combiner?"]) {
          var url = '/runs/' + run.id + '/sankey'
          var target = 'sankey_r' + run.id
          items.push("<li class='menuvisualize' run_id='"+run.id+"'><a target='"+target+"' href='"+url+"'>"+run.display+"</a></li>")
        }
      })
      var menu = $("#runs_menu").empty()
      try {menu.menu("destroy")} catch(e){}
      menu.append($(items.join(""))).hide().menu()
      // attach menu listeners
      $("li.menuvisualize", menu).unbind().click(function(){
        menu.hide()
      })
      // show menu
      menu.show().position({
        my: "left top",
        at: "right top",
        of: this // visualize button
      });
      $(document).one( "click", function() {
        menu.hide();
      });
      return false
    })

  // append tab for each runset
  $.getJSON('/runsets', function(runsets){
    $.each(runsets, function(id, runset){
      add_runset_in_tabs(tabs, runset)
    })
    tabs.tabs( "refresh" );
    $('#tab-common').hide()
    $('#show_input').show()
  })
  
  // close icon remove runset from server
  tabs.delegate( "span.ui-icon-close", "click", function() {
    var runset_id = $(this).attr("runset_id")
    if (confirm("Are you sure you want to permanently delete Results " + runset_id + "?")){
       var span_rm = this
       delete_runset(span_rm, runset_id)
    }
  });
}

function delete_runset(span_rm, runset_id){
  $.ajax({
    url: '/runsets/'+ runset_id,
    type: "DELETE",
    success: function(){
      // activate input tab
      activate_runset_tab(0);
      // remove li
      $(span_rm).closest("li").remove()
      // delete item from array
      runsets = $.grep(runsets, function(runset, i){
        return runset.id != runset_id
      })
      // notify tabs to recalculate indices
      $("#data-selector").tabs("refresh");
    }
  });
}

function setup_pusher()
{
  var pusher = new Pusher('<%= Pusher.key %>'); // establishes the connection
  var channel = pusher.subscribe("user_" + current_user_id);

  // handle run_change
  channel.bind('run_change', function(run) {
    if (run["allegator?"]) {
      update_run_row(allegations_table, run)
      if (typeof claims_dt != 'undefined') claims_dt.draw()
    }
    else {
      var runset = $.grep(runsets, function(runset, i){
        return runset.id == run.runset_id
      })[0]
      var found_run = $.grep(runset.runs, function(run_value, j){
        return run_value.id == run.id
      })[0]
      found_run.status = run.status
      activate_runset_tab(runset.id)
      update_run_row(runtable, run) 
    }
  });

  // handle dataset_change
  channel.bind('dataset_change', function(dataset) {
    // update corresponding rows in table
    // find dataset in table (if any) to update it
    var datasets_table = dataset.kind == 'claims' ? claims_dt : ground_dt
    var row = datasets_table.row($("#dataset-" + dataset.id).parent().parent())
    if (row.length == 1) {
      row.data(dataset)
      bind_dataset_delete($(".trash-icon", row.node()), datasets_table)
      bind_dataset_select($(".dataset_selector", row.node()), dataset.kind)

      $(row.node()).effect("highlight")
      refresh_datatables();
    }
  });
}

function update_run_row(table, run)
{
  if (typeof table == 'undefined') return
  var row = table.row($("#run-" + run.id).parent().parent())
  if (row.length == 1) {
    row.data(run)
    $(row.node()).effect("highlight")
    return true
  }
}

function setup_start_button()
{
  $("#start_button")
  .button()
  .click(function(){
    // setup checked algorithms
    var checked_algo = {}
    $('.algorithm_checkbox').each(function(index, check_box){
      check_box = $(check_box)
      var algorithm_id = check_box.attr("algorithm_id")
      if(check_box.is(':checked') && !check_box.button("option", "disabled")){
        if (config_data[algorithm_id].length > 0)
          checked_algo[algorithm_id] = config_data[algorithm_id]
        else
          checked_algo[algorithm_id] = 0  // otherwise, won't be included in params
      }
    });
    // send post request
    var data = {
      checked_algo: checked_algo,
      general_config: config_data["General Parameters"]
    }
    data.datasets = selected_claim_datasets.append(selected_ground_datasets).get()
    $.ajax({
      type: "POST",
      url : "/runsets",
      data: data,
      success: function(runset){
        add_runset(runset)
        activate_runset_tab(runset.id)
      }
    });
  });
}

function setup_runtable()
{
  var excess = 48
  var height = pageLayout.state.south.innerHeight - excess
  var obj = $('#run_table')
  runtable = obj.DataTable({
    dom: 'tJST',
    serverSide : true,
    jQueryUI: true,
    destroy: true,
    ordering: false,
    deferRender:true,
    "scrollY": height,
    "scrollX": true,  // so that table header scrolls with content
    "ajax": function (data, callback, settings) {
      var url = "/runs";
      $.getJSON(url, data, function(response){
        callback(response)
        $(".action-cancel", obj).unbind().click(function(event){
          event.stopPropagation(); // stop the click from propagating to the tr to select/deselcet
          alert("Sorry, not implemented yet, just keep calm and stay tuned!")
        });
        $(".action-delete", obj).unbind().click(function(event){
          event.stopPropagation(); // stop the click from propagating to the tr to select/deselcet
          if(confirm("Are you sure you want to delete this run?")) {
            var run_id = $(this).attr("run_id")
            $.ajax({
              url: '/runs/'+ run_id,
              type: "DELETE",
              success: function(){
                runtable.draw();
                // iterate on all runsets and delete the run 
                $.each(runsets, function(i, runset){
                  runset.runs = $.grep(runset.runs, function(run, index){
                    return run.id != run_id
                  })
                })
                // if the runset is empty, delete it
                runsets = $.grep(runsets, function(runset, i){
                  if (runset.id > 0 && runset.runs == 0){
                    delete_runset('span#'+runset.id, runset.id)
                    return false
                  }
                  return true
                })
                destroy_datatables()
                setup_datatables()
              }
            });
          }
        });
      });
    },
    'columns': [
      {
        'data': 'runset_id'
      },
      {
        'data': 'id',
        'render': function (id, type, full, meta){
          var span = id + ""
          if (full.last_error) {
            span = "<span class='ui-icon ui-icon-alert ui-icon-with-text' title='Last error: "
              + full.last_error
              + "'>"+id+"</span>"
          }
          return span
        }
      },
      {
        'data': 'created_at',
        'render': function (created_at, type, full, meta){
          return moment(created_at).calendar()
        }
      },
      {'data': 'display'},
      {
        'data': 'status',
        'render': function (status, type, full, meta){
          var class_attrib = ""
          switch(status) {
            case 'scheduled': class_attrib = 'ui-icon ui-icon-clock'; break;
            case 'started': class_attrib = 'spinner'; break;
            case 'finished': return moment("00:00:00", "HH:mm:ss").add(moment.duration(full.duration)).format("HH:mm:ss.SSS")
          }
          return '<span class="'+class_attrib+'" title="'+status+'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>'
        }
      },
      {'data': 'precision'},
      {'data': 'accuracy'},
      {'data': 'recall'},
      {'data': 'specificity'},
      {'data': 'iterations'},
      {
        'data': 'id',
        'render': function (id, type, full, meta){
          var actions = ""
          switch(full.status){
            case 'scheduled': actions = ["D"]; break;
            case 'started': actions = ["C"]; break;
            case 'finished': actions = ["D"]; break;
          }
          return $.map(actions, function(action){
            switch(action){
              case 'C':
                return '<span run_id="'+id+'" class="action-cancel ui-icon ui-icon-closethick" title="Cancel"></span>'
              case 'D':
                return '<span run_id="'+id+'" class="action-delete ui-icon ui-icon-trash" title="Delete"></span>'
            }
          }).join("") +
            '<span id="run-'+id+'"></span>'
        }
      }
    ],
    tableTools: {
      "sRowSelect": "single",  // "os" doesn't allow fnPreRowSelect to work!
      "fnRowSelected": function ( nodes ) {
        var run = runtable.row(nodes[0]).data()
        activate_runset_tab(run.runset_id)
      },
      // "fnPreRowSelect": function ( ev, nodes ) {
      //   console.log("in preselect", ev, nodes)
      //   var status = runtable.row(nodes[0]).data().status;
      //   return status == "finished";
      // },
      "aButtons": []
    }
  });
  runtable_tools = TableTools.fnGetInstance('run_table');
}

function setup_allegationtable()
{
  var obj = $('#allegations_table')
  allegations_table = obj.DataTable({
    dom: 'tJS',
    serverSide : true,
    jQueryUI: true,
    destroy: true,
    ordering: false,
    deferRender:true,
    "scrollY": '200px',
    "scrollX": true,  // so that table header scrolls with content
    "ajax": function (data, callback, settings) {
      var url = "/runs";
      data.allegations = 1
      $.getJSON(url, data, function(response){
        callback(response)
        $(".action-delete", obj).unbind().click(function(event){
          if(confirm("Are you sure you want to delete this allegation?")) {
            var run_id = $(this).attr("run_id")
            $.ajax({
              url: '/runs/'+ run_id,
              type: "DELETE",
              success: function(){
                allegations_table.draw();
              }
            });
          }
        });
      });
    },
    'columns': [
      {
        'data': 'allegates_run_id',
        'render': function (allegates_run_id, type, full, meta){
          var span = allegates_run_id + ""
          if (full.last_error) {
            span = "<span class='ui-icon ui-icon-alert ui-icon-with-text' title='Last error: "
              + full.last_error
              + "'>"+allegates_run_id+"</span>"
          }
          return span
        }
      },
      {'data': 'allegates_claim_id'},
      // {'data': 'allegates_value'},
      {
        'data': 'created_at',
        'render': function (created_at, type, full, meta){
          return moment(created_at).calendar()
        }
      },
      // {'data': 'display'},
      {
        'data': 'status',
        'render': function (status, type, full, meta){
          var class_attrib = ""
          switch(status) {
            case 'scheduled': class_attrib = 'ui-icon ui-icon-clock'; break;
            case 'started': class_attrib = 'spinner'; break;
            case 'finished': return moment("00:00:00", "HH:mm:ss").add(moment.duration(full.duration)).format("HH:mm:ss.SSS")
          }
          return '<span class="'+class_attrib+'" title="'+status+'">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span>'
        }
      },
      {'data': 'claims_allegated'},
      {
        'data': 'id',
        'render': function (id, type, full, meta){
          return '<span run_id="'+id+'" class="action-delete ui-icon ui-icon-trash" title="Delete"></span>'+
          '<span id="run-'+id+'"></span>'
        }
      }
    ]
  });
}

function setup_claims_dataset_table()
{
  claims_dt = setup_dataset_table("claims")
}

function setup_ground_dataset_table()
{
  ground_dt = setup_dataset_table("ground")
}

function setup_dataset_table(dataset_kind){
  var obj = $('#' + dataset_kind + "_datasets_table")
  var dt = obj.DataTable({
    dom: 'JtS', 
    serverSide : true,
    jQueryUI: true,
    scrollY: '200px',
    scrollX: true,  // so that table header scrolls with content
    destroy: true,
    ordering: false,
    ajax: function (data, callback, settings) {
      var url = "/datasets?kind="+dataset_kind
      $.getJSON(url, data, function(response){
        s3_direct_post = response.s3_direct_post
        callback(response)
        bind_dataset_delete($(".trash-icon", obj), dt)
        bind_dataset_select($(".dataset_selector", obj), dataset_kind)
      });
    },
    'columns':[
      {
        'data': 'id',
        'render': function (dataset_id, type, full, meta){
          var checked = 
            (selected_claim_datasets.contains(dataset_id) || selected_ground_datasets.contains(dataset_id)) ? "checked='checked'" : ""
          return "<input type='checkbox' class='dataset_selector' dataset_id='"+dataset_id+"' "+checked+"/>"
        }      
      },
      {'data': 'original_filename'},
      {
        'data': 'created_at',
        'render': function (created_at, type, full, meta){
          return moment(created_at).calendar()
        }      
      },
      {
        'data': 'row_count',
        'render': function (row_count, type, full, meta){
          var class_attrib = "", desc = "", more_info = ""
          if (full.duplicate_rows > 0 || full.invalid_rows > 0) {
            more_info = '\nDuplicate rows: ' + full.duplicate_rows + ' (not imported)'
              + '\nInvalid rows: ' + full.invalid_rows + ' (not imported)'
          }
          switch(full.status) {
            case null: class_attrib = 'ui-icon ui-icon-clock'; desc = 'Upload received, processing will start shortly...'; break;
            case 'processing': class_attrib = 'spinner ui-icon-with-text'; desc = 'Processing upload...' + more_info; break;
            case 'failed': class_attrib = 'ui-icon ui-icon-alert ui-icon-with-text'; desc = 'Processing failed' + more_info; break;
            case 'done': 
              class_attrib = 'ui-icon ui-icon-with-text '
              class_attrib += more_info ? 'ui-icon-info' : 'ui-icon-circle-check';
              desc = 'Processing done' + more_info;
              break;
          }
          return '<span id="dataset-'+full.id+'" class="'+class_attrib+'" title="'+desc+'">'+row_count+'</span>'
        }
      },
      {'data': 'id',
        'render' : function (data,type,full,meta){
          return '<span dataset_id="'+data+'" class="trash-icon ui-icon ui-icon-trash"></span>'
        }
      }
    ]
  });

  return dt;
}

function bind_dataset_delete(selector, datasets_table)
{
  selector.click(function(){
    if(confirm("Are you sure you want to delete this dataset?"))
      var dataset_id = $(this).attr("dataset_id")
      $.ajax({
        url: '/datasets/' + dataset_id,
        type: "DELETE",
        success: function(){
          selected_claim_datasets.remove(dataset_id)
          selected_ground_datasets.remove(dataset_id)
          toggle_start_button()
          set_table_title()
          datasets_table.draw()
          refresh_datatables()              
        }
      });
   });
}

function bind_dataset_select(selector, kind) {
  selector.click(function(){
    var dataset_id = $(this).attr("dataset_id")
    var hash = kind == 'ground' ? selected_ground_datasets : selected_claim_datasets
    // update the seletected object
    if ($(this).is(":checked"))
      hash.add(dataset_id)
    else
      hash.remove(dataset_id)

    toggle_start_button()
    set_table_title()
    refresh_datatables()
  })
}

function clear_and_init_selected_datasets(dataset)
{
  if (dataset.kind == 'ground') {
    selected_claim_datasets.clear()
    selected_ground_datasets.seed([dataset.id])
  }
  else {
    selected_ground_datasets.clear()
    selected_claim_datasets.seed([dataset.id])
  }
  toggle_start_button()
}

function check_algorithm_checkbox()
{
  // returns true if mixing multi-valued and single-valued algorithms 

  var algorithm_id
  var found_single = 0, found_multi = 0

  $(".algorithm_checkbox").each(function(index, check_box) {
    check_box = $(check_box)
    algorithm_id = check_box.attr("algorithm_id")

    if (check_box.is(':checked')) {
      if (check_box.attr("multi") == "multi")
        found_multi++
      else
        found_single++
    }
  });

  return found_single > 0 && found_multi > 0
 }

function refresh_datatables()
{
  if (datatable) datatable.draw()
  if (source_table) source_table.draw()
}

function destroy_datatables()
{
  if (source_view) {
    if (typeof source_table != 'undefined') {
      // sources table
      source_table.search('')
      source_table.destroy()
      source_table = undefined
    }
  }
  else {
    // claims table
    if (typeof datatable != 'undefined') {
      datatable.search('')
      save_columns_visibility()
      datatable.destroy()
      datatable = undefined // to prevent calling save_columns_visibility again on destroyed table which yields all visible columns
    }
  }
  // manually remove filter boxes and colviz, because they have been detached previously from datatables
  $(".dataTables_filter").remove()
  $(".ColVis").remove()
}

function save_columns_visibility()
{
  // sets datatable_columns_visibility array of hidden columns in datatable
  var visible_list = datatable.columns().visible()
  for (var i = 0; i < visible_list.length; i++) {
    datatable_columns_visibility[datatable_columns[i].data] = visible_list[i]
  }
}

function is_visible_column(field_name)
{
  // returns boolean wheather column is hidden in datatable
  return datatable_columns_visibility[field_name]
}

function setup_datatables()
{
  var data_selector = $("#data-selector").tabs("option", "active")
  var showing_inputs = data_selector == 0
  var runset = runsets[data_selector]
  var height = pageLayout.state.center.innerHeight - 190
  var dt

  if (source_view)
    dt = setup_source_id_datatable(showing_inputs, runset, height)
  else
    dt = setup_main_datatable(showing_inputs, runset, height)

  dt.draw()
  set_table_title()
}

function setup_source_id_datatable(showing_inputs, runset, height)
{
  var field_name = "source_id"
  var field_display = field_name
  var filter = '', order = [[0, 'asc']]
  if (typeof source_table != 'undefined') {
    filter = source_table.search()
    order = source_table.order()
  }

  var obj = $("#"+field_name+"_datatable")

  obj.empty().append($("<thead><tr></tr></thead>"))
  var thead = $("thead tr", obj)
  thead.append("<th>"+field_display+"</th>")
  var cols = [{data: field_name}]

  if (showing_inputs) {
    thead.append(
      "<th>Unique Claims</th>"+
      "<th>Unique Objects</th>"
    )
    cols = cols.concat([{data: 'uclaims'}, {data: 'uobjs'}])
  }
  else {
    append_runs_to_table(runset, thead, cols, false)
  }

  source_table = obj.DataTable({
    "serverSide": true,
    "deferLoading": 0,  // don't load first page automatically because main datatable is not ready yet
    "scrollY": height,
    "scrollX": true,  // so that table header scrolls with content
    "jQueryUI": true,
    "search": {"search": filter},
    "order": order,
    "ajax": function (data, callback, settings) {
      var url
      if (showing_inputs) {
        url = "/dataset_rows"
        data.datasets = selected_claim_datasets.append(selected_ground_datasets).get()
      }
      else {
        url = "/runsets/" + runset.id + "/results.json"
        if (normalized_view)
          data.extra_normalized = 1
      }
      data.extra_only = field_name
      $.getJSON(url, data, function(response){
        callback(response)
      })
    },
    "columns": cols,
    dom: '<"clear">CfJtS<"tabletitle">i',
    "destroy": true,  // destroy first if reinitializing
    "scroller": {
      loadingIndicator: false
    },
    "language": {
      "info": "Showing _START_ to _END_ of _TOTAL_ unique sources",
      "infoEmpty": "No sources",
      "infoFiltered": "(filtered from _MAX_ total unique sources)"
    }
  });

  relocateTableControls(showing_inputs, "source_id_datatable")

  return source_table;
}  

function setup_main_datatable(showing_inputs, runset, height)
{
  // maintain search filter, order and column visibility across destroy/create
  var filter = '', order = [[0, 'asc']]
  if (typeof datatable != 'undefined') {
    filter = datatable.search()
    order = datatable.order()
    save_columns_visibility()
  }

  var obj = $('#datatable')
  obj.empty().append($("<thead><tr></tr></thead>"))
  var thead = $("thead tr", obj)
  datatable_columns = []
  var basic_fields = [
    // wrap claim_id in span for icons
    {name: "claim_id", wrap: true,
      render: function(field_value, type, full, meta){
        return full['ground?'] ? "" : field_value
      }
    },
    {name: "object_key", display: "object_id"},
    {name: "property_key", display: "property_id"},
    {name: "property_value"},
    {name: "source_id"},
    {name: "timestamp", visible: false}
  ]

  $.each(basic_fields, function(id, field){
    thead.append("<th>" + (field.display || field.name) + "</th>")
    push_column_data(datatable_columns, field)
  })

  var finished_runs = []
  if (!showing_inputs) {
    finished_runs = append_runs_to_table(runset, thead, datatable_columns, true)
  }

  var row_name = "rows"

  // create menu
  var menu = setup_datatable_menu(obj)

  datatable = obj.DataTable({
    "serverSide": true,
    "deferLoading": 0,  // don't load first page automatically because main datatable is not ready yet
    "scrollY": height,
    "scrollX": true,  // so that table header scrolls with content
    jQueryUI: true,
    "dom": '<"toolbar">CfJtS<"tabletitle">i',
    "colVis": {
      "exclude": [],
      "fnStateChange": function ( iColumn, bVisible ) {
        if (bVisible)
          datatable.draw()
      }
    },
    "search": {"search": filter},
    "order": order,
    "ajax": function (data, callback, settings) {
      var url
      if (showing_inputs) {
        url = "/dataset_rows"
        data.datasets = selected_claim_datasets.append(selected_ground_datasets).get()
      }
      else {
        url = "/runsets/" + runset.id + "/results.json"
        if (normalized_view)
          data.extra_normalized = 1
      }
      // data.extra_source_id_criteria = source_table.search()
      $.getJSON(url, data, function(response){
        callback(response)
      })
    },
    "columns": datatable_columns,
    "rowCallback": function( row, data ) {
      // Color the confidences green/red
      if (!showing_inputs) {
        $.each(finished_runs, function(id, run){
          var bool = data["r"+run.id+"_bool"]
          var td = $("span.r"+run.id+"_cell", row).parent()
          td.addClass("claim_is_"+bool)

          if (run["combiner?"]) {
            // replace text
            td.empty().text(bool == 't' ? 'True' : 'False')
          }
          else {
            td.addClass("td_clickable")
              .click(function(e){
                clicked_datatable_row(td, menu, data, run, e)
                return false  // swallow event, otherwise the document.one event will trigger and hide menu
              })
          }
        })
        // highlight row if it is a previously allegated claim
        if (data.allegated)
          $(row).addClass("allegated_claim")
            .attr("title", "This claim was allegated in a previous run")
      }
      // attach icons for child claims
      if (data.parent_id && data.parent_id != data.claim_id) {
        var td = $("span.claim_id_cell", row)
        td.prepend("<span class='ui-icon ui-icon-arrow-1-se' style='float: left;' " +
          "title='Claim "+data.claim_id+" is a member of parent multi-valued claim "+data.parent_id+"'" + "></span>")
      }
    },
    "destroy": true,  // destroy first if reinitializing
    "scroller": {
      loadingIndicator: false
    },
    "language": {
      "info": "Showing _START_ to _END_ of _TOTAL_ unique " + row_name,
      "infoEmpty": "No " + row_name,
      "infoFiltered": "(filtered from _MAX_ total unique " + row_name + ")"
    }
  });

  relocateTableControls(showing_inputs, "datatable")

  return datatable;
}

function setup_datatable_menu(datatable)
{
  return $("<ul id='cellmenu'>"+
    "<li class='menuexplain'>"+
      "<a href='#'>Explain...</a> "+
      "</li>"+
    "<li class='menuallegate'>"+
      "<a href='#'>Allegate...</a>"+
      "</li>"+
    "</ul>").appendTo(datatable).hide().menu()
}

function clicked_datatable_row(td, menu, data, run, e)
{
  // show menu
  // attach menu listeners
  $("li.menuexplain a", menu).unbind().click(function(){
    var anchor = $(this)
    var target = 'explain_r' + run.id + 'c' + data.claim_id
    var explain_url = '/runs/' + run.id + '/explain?claim_id=' + data.claim_id
    anchor.attr("target", target)
    anchor.attr("href", explain_url)
    explain_claim(data.claim_id, run.id, target, explain_url)
    menu.hide();
  })
  $("li.menuallegate a", menu).unbind().click(function(){
    allegate_claim(data.claim_id, run.id)
    menu.hide(); return false;
  })
  if (td.hasClass("claim_is_t"))
    $(".menuallegate", menu).show()
  else
    $(".menuallegate", menu).hide()

  menu.show().position({
    my: "left top",
    of: e
  });

  $(document).one("click", function() {
    menu.hide();
  });
}

function relocateTableControls(showing_inputs, selector_prefix)
{
  var container = showing_inputs ? $("#show_input .filter_container") : $("#tab-common .filter_container")
  container.empty()
    .append($("#"+selector_prefix+"_wrapper .ColVis").detach())
    .append($("#"+selector_prefix+"_filter").detach())
}

function explain_claim(claim_id, run_id, target, url)
{
  // activate explain tab if not active
  $("#tabs").tabs("option", "active", 1)
  $("#explanation-log").append(
    "<li><a target='"+target+"' href='"+url+"'>Explanation for run "+run_id+" and claim "+claim_id+"</a></li>"
  )
  .next().hide()
}

function allegate_claim(claim_id, run_id)
{

  if (confirm(
  "To falsify this claim, you need to insert some fake claims "+
  "and rerun this algorithm appending those fake claims to your original datasets. " +
  "\n\nCompute these claims?")) {
    // create allegation job
    $.ajax({
      type: "POST",
      url : "/runs",
      data: {
        claim_id: claim_id,
        run_id: run_id
      },
      success: function(run){
        allegations_table.draw()
      }
    });
    // activate allegate tab if not active
    $("#tabs").tabs("option", "active", 2)
  }
}

function append_runs_to_table(runset, thead, cols, include_combiner)
{
  // select only finished runs
  var finished_runs = $.grep(runset.runs, function(run){
    return run.status == 'finished'
  })

  // select non detail view runs
  if (!detail_view && include_combiner) {
    // count combiners for the non detail view
    var found_combiner = $.grep(finished_runs, function(run){
      return run['combiner?']
    }).length > 0

    if (found_combiner) {
      // select only combiners
      finished_runs = $.grep(finished_runs, function(run){
        return run['combiner?']
      })      
    }
  }

  // sort runs
  var sorted_runs = finished_runs.sort(function(r1, r2){
    var r1c = r1["combiner?"], r2c = r2["combiner?"]
    if (r1c == r2c)
      return r1.id - r2.id
    else
      return r1c ? -1 : 1
  })

  // append runs to table
  $.each(sorted_runs, function(i, run){
    if (!run["combiner?"] || include_combiner) {
      thead.append("<th>["+run.id + "] " + run.algorithm+"</th>")
      var field = {name: 'r' + run.id, wrap: true}
      if (!detail_view && !run["combiner?"]) {
        field.render = function(field_value, type, full, meta) {
          // for non detail view, change field_value to either True or False
          var bool = full["r"+run.id+"_bool"]
          return bool == 't' ? 'True' : (bool == 'f' ? 'False' : field_value)
        }
      }
      push_column_data(cols, field)
    }
  })
  return sorted_runs
}

function push_column_data(cols, field)
{
  var saved_visibility = is_visible_column(field.name)
  var field_visible = (typeof field.visible != 'undefined') ? field.visible : true
  var visible = (typeof saved_visibility != 'undefined') ? saved_visibility : field_visible
  var coldef = {data: field.name, visible: visible}

  coldef.render = field.render

  if (field.wrap) {
    coldef.render = function(field_value, type, full, meta) {
      return '<span class="'+field.name+'_cell">'+
      (field.render ? field.render(field_value, type, full, meta) : field_value)
      +'</span>'
    }
  }
  
  cols.push(coldef)
}

function setup_layout()
{
  pageLayout = $('body').layout({
    applyDefaultStyles: true,
    autoResize:       true, 
    animatePaneSizing: true,
    closable:       true,

    west__size: '30%',
    west__minSize: "10%",
    west__maxSize: "50%",
    west__spacing_closed:    15,
    west__spacing_open:    15,
    west__togglerTip_closed: 'Click to open toolbox',
    west__togglerTip_open: 'Click to close toolbox',
    west__slidable: false,

    south__initClosed: true,
    south__size: '20%',
    south__slidable: true,
    south__togglerLength_open: 0,
    south__togglerLength_closed: 0,
    south__spacing_closed:    15,
    south__sliderTip: 'Click to view progress of runs',
    south__onopen: setup_runtable,

    center__onresize: function() {
      setup_datatables()
      setup_claims_dataset_table()
      setup_ground_dataset_table()
      setup_allegationtable()
    }
  });

}

function setup_west_pane()
{
  // create tabs
  $( "#tabs" ).tabs({
    activate: function(event, ui) {
      if (ui.newTab.attr("id") == 'allegate-tab')
        setup_allegationtable()
    }
  })
  
  // create the accordion in first tab
  $("#tab-1 .accordion").accordion({
    collapsible: true,
    active: false,
    heightStyle: "content",
    "activate": function(event, ui) {
      if (ui.newHeader.attr("id") == "upload_claims_header")
        setup_claims_dataset_table()
      else if (ui.newHeader.attr("id") == "upload_ground_header"){
        setup_ground_dataset_table()
      }
    }
  })

  setup_fileupload()
  setup_algorithms()
}

function setup_fileupload()
{
  // file upload
  var jqXHR= null;
  $('.fileupload').fileupload({
    add: function (e, data) {
      data.dataType = 'XML'
      data.formData = s3_direct_post.fields
      data.url = s3_direct_post.url
      data.method = 'POST'
      data.paramName = 'file'
      jqXHR = data.submit()
      $(this).parent().next().next().removeAttr('disabled')
    },  
    start: function(){
      // console.log("started upload")
      $(this).parent().next().next().next().find('.progress-bar')
        .css('width','0');
    },
    progressall: function (e, data) {
      // console.log(data)
      var progress = parseInt(data.loaded / data.total * 100, 10);
       $(this).parent().next().next().next().find('.progress-bar')
        .css('width', progress + '%');
    },
    done: function(e, data) {
      $(this).parent().next().next().attr('disabled', 'disabled')

      // extract key and generate URL from response
      var key = $(data.jqXHR.responseXML).find("Key").text()
      var kind = $(this).attr("kind")
      $.post('/datasets', {
        s3_key: key,
        original_filename: key.split("/").pop(),
        kind: kind
      }, function(dataset){
        // clear checked datasets and check only the uploaded one
        clear_and_init_selected_datasets(dataset)
        if (kind == 'ground')
          ground_dt.draw()
        else
          claims_dt.draw()
        $("#data-selector").tabs("option", "active", 0)
        set_table_title()
      })
    },
    fail: function() {
      // console.log("cancelled upload")
      $(this).parent().next().next().attr('disabled', 'disabled')
      $(this).parent().next().next().next().find('.progress-bar')
        .css('width','0');
    }
  });

  $('.cancel').click(function (e) {
    jqXHR.abort();
  });
}

function setup_algorithms()
{
  // create algorithm checkboxes in tab-1 under 3rd header
  var container = $("#algo_pane")

  $.each(algorithms, function(index, algorithm){
    container.append(generate_algorithm_checkbox(algorithm))
    container.append(generate_algorithm_config(algorithm))
  });

  // create button checkbox
  $(".algorithm_checkbox")
    .button({icons: {primary: 'ui-icon-radio-off'}})
    .change(function(){
      // change style
      $(this).button("option", "icons", {primary: $(this).is(':checked') ? 'ui-icon-check' : 'ui-icon-radio-off'})
      // toggle checked class and algorithm config
      $(this)
        .next('label').toggleClass("vivid_checkbox_label")
        .next('div').slideToggle("fast")
      // warn if mixing single_valued and multi_valued algorithms
      if (check_algorithm_checkbox())
        $(".algo-mix-warn").show()
      else
        $(".algo-mix-warn").hide()
      // toggle start button
      toggle_start_button()
    });

  // create spinners
  $(".spinner").spinner({
    step: 0.000001
  })
  .on("spinchange", function(){
    var value = $(this).spinner('value')
    var algo_id = $(this).attr('algorithm_id')
    var order_val = $(this).attr('order')
    config_data[algo_id].splice(order_val,1,value)
  })
  .each(function(){
    var step = $(this).attr('step')
    var dataType = $(this).attr('dataType')

    if (step != '')
    {
      //console.log("step defined: ", step, parseFloat(step), $(this).attr("algorithm_id"), $(this).attr('order'))
      $(this).spinner('option', 'numberFormat', 'n')
      $(this).spinner('option', 'step', parseFloat(step))
    }
    else if (dataType == 'double') {
     // console.log("default step of 0.1")
      $(this).spinner('option', 'numberFormat', 'n')
      $(this).spinner('option', 'step', 0.1)
    }
    else {
     // console.log("integer data type")
      $(this).spinner('option', 'step', 1)
    }
    $(this).spinner('option', 'min', parseFloat($(this).attr("min")));
    $(this).spinner('option', 'max', parseFloat($(this).attr("max")));

  });

}

function generate_algorithm_checkbox(algorithm)
{
  var html = ""

  if (algorithm.general || algorithm.combiner) {
    var classes = 'algorithm_general'
    if (algorithm.combiner) classes += ' combiner combiner_off'
    html += "<div class='"+classes+"' title='" + algorithm.description
    html += "'>"+algorithm.name+"</div>"
  }
  else {
    html += "<input type='checkbox' id='algorithm_checkbox_" 
    html += algorithm.name+"' algorithm_id='" + algorithm.name
    html += "' class='algorithm_checkbox' "
    if (algorithm.multi) html += "multi='multi' "
    html += " /><label class='algorithm_checkbox_label' "
    html += "title='" + algorithm.description+"' for='algorithm_checkbox_"
    html += algorithm.name+"'>" + algorithm.name
    if (algorithm.multi) html += "  (multi-valued property values)"
    html += "</label>"
  }

  return html
}

function generate_algorithm_config(algorithm)
{
  var html = ""
  var params = ""
  var order = 0
  config_data[algorithm.name] = []
  $.each(algorithm.params, function(pindex, param){
    if (param.hidden != true){
      params += "<tr><td width='100%'><span class='param-name' title='"
      + param.desc +"'>" + param.name
      + "</span> </td><td><input step='"+(param.step||'')+"' dataType= '"+param.dataType+"' class='spinner' min='"
      + param.min+"' max='"+param.max+"' value='"+param.value
      + "' algorithm_id='"+algorithm.name+"' order= '"+order+"' ></input></td></tr>" 
    }
    order++
    config_data[algorithm.name].push(param.value)
  });

  if (params != "") {
    var classes = "algorithm_config algorithm_" + algorithm.name
    if (algorithm.general) classes += " algorithm_config_general"
    html += "<div class='"+classes+"'><table cellpadding=0 cellspacing=0 width='100%' border=0 style ='border-collapse:collapse;'>"
      + params + "</table></div>"
  }
  return html
}

function setup_datasets_dialog(dataset_icon_selector){
  var dialog_div = $("#datasets_dialog")
  var datasets = [
    "Books (155 KB)",
    "Flights (16.2 MB)",
    "Population (540 KB)",
    "Weather (2.1 MB)",
    "Biography (107 MB)"
  ]

  var html = ""
  html += "<h4>Datasets format</h4>"
  html += "<div class='upload-hints'>" + $("#upload-hints-claims").html() + "</div>"
  html += "<h4>Ground Truth Datasets format</h4>"
  html += "<div class='upload-hints'>" + $("#upload-hints-ground").html() + "</div>"
  html += "<h4>Download examples</h4>"
  html += "<ol>"
  $.each(datasets, function(id, dataset){
    html += "<li><a href='http://allegatortrack.s3-website-us-east-1.amazonaws.com/datasets/"
      +dataset+".zip'>"+dataset+"</a></li>"
  })

  html += "</ol>"

  dialog_div.empty().append(html).dialog({
    autoOpen: false,
    modal: true,
    width: '700px'
  });

  $(".download-datasets").click(function(){
    dialog_div.dialog('open')
  });
}
